{"version":3,"sources":["webpack:///./src/templates/blog-tag.js","webpack:///./src/components/seo.js","webpack:///./src/components/blog.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","_components_blog__WEBPACK_IMPORTED_MODULE_0__","Blog","SEO","_ref","_ref$description","description","_ref$lang","lang","_ref$meta","meta","title","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","react_helmet__WEBPACK_IMPORTED_MODULE_2__","htmlAttributes","bodyAttributes","class","titleTemplate","name","content","property","author","concat","defer","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_seo__WEBPACK_IMPORTED_MODULE_1__","gatsby__WEBPACK_IMPORTED_MODULE_2__","_ref$data","tags","posts","tag","pageContext","className","nodes","map","node","key","id","to","fields","slug","frontmatter","excerpt","group","_ref2","fieldValue","totalCount"],"mappings":"0FACAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAAL,EAAA,KAEeM,YAAf,EAEO,IAAMF,EAAK,qFCyEHG,IAnEf,SAAAC,GAAkE,IAAAC,EAAAD,EAAnDE,mBAAmD,IAAAD,EAArC,GAAqCA,EAAAE,EAAAH,EAAjCI,YAAiC,IAAAD,EAA1B,KAA0BA,EAAAE,EAAAL,EAApBM,YAAoB,IAAAD,EAAb,GAAaA,EAATE,EAASP,EAATO,MAC/CC,EADwDC,EAAAC,KACxDF,KAcFG,EAAkBT,GAAeM,EAAKI,aAAaV,YAEzD,OACEW,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACEC,eAAgB,CACdb,QAEFc,eAAgB,CACdC,MAAO,wBAETZ,MAAOA,EACPa,cAAa,QAAUZ,EAAKI,aAAaL,MACzCD,KAAM,CACJ,CACEe,KAAI,cACJC,QAASX,GAEX,CACEY,SAAQ,WACRD,QAASf,GAEX,CACEgB,SAAQ,iBACRD,QAASX,GAEX,CACEY,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASd,EAAKI,aAAaY,QAE7B,CACEH,KAAI,gBACJC,QAASf,GAEX,CACEc,KAAI,sBACJC,QAASX,IAEXc,OAAOnB,GAEToB,OAAO,6MCzEb,IAAAC,EAAAnC,EAAA,GAAAoC,EAAApC,EAAAqC,EAAAF,GAAAG,EAAAtC,EAAA,KAAAuC,EAAAvC,EAAA,IAIeE,EAAA,WAAAM,GAAqD,IAAAgC,EAAAhC,EAAlDU,KAAQuB,EAA0CD,EAA1CC,KAAMC,EAAoCF,EAApCE,MAAwBC,EAAYnC,EAA3BoC,YAAeD,IACtD,OACEP,EAAAd,EAAAC,cAACY,EAAA,SAAD,KACEC,EAAAd,EAAAC,cAACe,EAAA,EAAD,CAAKvB,MAAO4B,EAAG,UAAaA,EAAQ,SACpCP,EAAAd,EAAAC,cAAA,WAASsB,UAAU,2BACjBT,EAAAd,EAAAC,cAAA,OAAKsB,UAAU,aACbT,EAAAd,EAAAC,cAAA,OAAKsB,UAAU,aACbT,EAAAd,EAAAC,cAAA,MAAIsB,UAAU,SAAd,WAINT,EAAAd,EAAAC,cAAA,OAAKsB,UAAU,oBACbT,EAAAd,EAAAC,cAAA,OAAKsB,UAAU,oBACbT,EAAAd,EAAAC,cAAA,OAAKsB,UAAU,yBACZH,EAAMI,MAAMC,IAAI,SAAAC,GAAI,OACnBZ,EAAAd,EAAAC,cAACgB,EAAA,EAAD,CAAMU,IAAKD,EAAKE,GAAIC,GAAIH,EAAKI,OAAOC,MAClCjB,EAAAd,EAAAC,cAAA,OAAKsB,UAAU,kBACbT,EAAAd,EAAAC,cAAA,WAASsB,UAAU,8BACjBT,EAAAd,EAAAC,cAAA,KAAGsB,UAAU,SAASG,EAAKM,YAAYvC,OACvCqB,EAAAd,EAAAC,cAAA,OAAKsB,UAAU,WAAWG,EAAKO,eAMzCnB,EAAAd,EAAAC,cAAA,OAAKsB,UAAU,8BACbT,EAAAd,EAAAC,cAAA,WAASsB,UAAU,iBACjBT,EAAAd,EAAAC,cAAA,KAAGsB,UAAU,SAAb,QACAT,EAAAd,EAAAC,cAAA,OAAKsB,UAAU,mBACZJ,EAAKe,MAAMT,IAAI,SAAAU,GAAA,IAAGC,EAAHD,EAAGC,WAAYC,EAAfF,EAAeE,WAAf,OACdvB,EAAAd,EAAAC,cAAA,QAAM0B,IAAKS,EAAYb,UAAU,OAC/BT,EAAAd,EAAAC,cAACgB,EAAA,EAAD,CAAMY,GAAE,cAAgBO,GACrBA,EADH,KACiBC,EADjB","file":"component---src-templates-blog-tag-js-77b2cce2ae0f91e58d0e.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport Blog from \"../components/blog\";\n\nexport default Blog;\n\nexport const query = graphql`\n  query($tag: [String]) {\n    tags: allMarkdownRemark {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n    posts: allMarkdownRemark(\n      filter: { frontmatter: { tags: { in: $tag } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      nodes {\n        id\n        timeToRead\n        excerpt\n        frontmatter {\n          tags\n          date(formatString: \"DD MMMM, YYYY\")\n          title\n        }\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction SEO({ description = \"\", lang = \"en\", meta = [], title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      bodyAttributes={{\n        class: \"has-navbar-fixed-top\",\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n      // https://github.com/nfl/react-helmet/issues/315\n      defer={false}\n    />\n  );\n}\n\nexport default SEO;\n","import React, { Fragment } from \"react\";\nimport SEO from \"./seo\";\nimport { Link } from \"gatsby\";\n\nexport default ({ data: { tags, posts }, pageContext: { tag } }) => {\n  return (\n    <Fragment>\n      <SEO title={tag ? `Blog | ${tag}` : \"Blog\"} />\n      <section className=\"hero is-primary is-bold\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">Blog</h1>\n          </div>\n        </div>\n      </section>\n      <div className=\"padded-container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-vertical is-8\">\n            {posts.nodes.map(node => (\n              <Link key={node.id} to={node.fields.slug}>\n                <div className=\"tile is-parent\">\n                  <article className=\"tile is-child notification\">\n                    <p className=\"title\">{node.frontmatter.title}</p>\n                    <div className=\"content\">{node.excerpt}</div>\n                  </article>\n                </div>\n              </Link>\n            ))}\n          </div>\n          <div className=\"tile is-vertical is-parent\">\n            <article className=\"tile is-child\">\n              <p className=\"title\">Tags</p>\n              <div className=\"tags are-medium\">\n                {tags.group.map(({ fieldValue, totalCount }) => (\n                  <span key={fieldValue} className=\"tag\">\n                    <Link to={`/blog/tags/${fieldValue}`}>\n                      {fieldValue} ({totalCount})\n                    </Link>\n                  </span>\n                ))}\n              </div>\n            </article>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n"],"sourceRoot":""}